// Generated by CoffeeScript 1.4.0
(function() {
  var canvas_renderer, evolve, flatten_nested_array, frequencies, includes, key_to_array, neighbour_frequencies, neighbours_of, randomise_world, survives, world;

  flatten_nested_array = function(array) {
    return _.flatten(array, true);
  };

  includes = function(target, coll) {
    return _.any(coll, function(item) {
      return _.isEqual(item, target);
    });
  };

  frequencies = function(coll) {
    return _.countBy(coll, _.identity);
  };

  key_to_array = function(string) {
    var splitted;
    if (typeof string !== 'string') {
      return string;
    }
    splitted = string.split(',');
    return [parseInt(splitted[0]), parseInt(splitted[1])];
  };

  neighbours_of = function(_arg) {
    var x, y;
    x = _arg[0], y = _arg[1];
    return [[x - 1, y + 1], [x, y + 1], [x + 1, y + 1], [x - 1, y], [x + 1, y], [x - 1, y - 1], [x, y - 1], [x + 1, y - 1]];
  };

  neighbour_frequencies = function(world) {
    var all_neighbours_of_live_cells, cell;
    all_neighbours_of_live_cells = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = world.length; _i < _len; _i++) {
        cell = world[_i];
        _results.push(neighbours_of(cell));
      }
      return _results;
    })();
    return frequencies(flatten_nested_array(all_neighbours_of_live_cells));
  };

  survives = function(num_of_neighbours, alive) {
    if (alive && (num_of_neighbours === 2 || num_of_neighbours === 3)) {
      return true;
    }
    if (!alive && num_of_neighbours === 3) {
      return true;
    }
    return false;
  };

  evolve = function(world) {
    var cell, count, _ref, _results;
    _ref = neighbour_frequencies(world);
    _results = [];
    for (cell in _ref) {
      count = _ref[cell];
      if (survives(count, includes(key_to_array(cell), world))) {
        _results.push(key_to_array(cell));
      }
    }
    return _results;
  };

  world = [];

  canvas_renderer = function(new_world) {
    var canvas, ctx, size_of_cell, x, y, _i, _len, _ref, _results;
    canvas = $('#conway')[0];
    ctx = canvas.getContext('2d');
    ctx.fillStyle = "white";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "purple";
    size_of_cell = 10;
    _results = [];
    for (_i = 0, _len = new_world.length; _i < _len; _i++) {
      _ref = new_world[_i], x = _ref[0], y = _ref[1];
      _results.push(ctx.fillRect(x * size_of_cell, y * size_of_cell, size_of_cell, size_of_cell));
    }
    return _results;
  };

  randomise_world = function() {
    var x, y, _i, _results;
    _results = [];
    for (x = _i = 30; _i < 50; x = ++_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (y = _j = 15; _j < 30; y = ++_j) {
          if (Math.floor(Math.random() + 0.5) === 1) {
            _results1.push(world.push([x, y]));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      })());
    }
    return _results;
  };

  randomise_world();

  setInterval((function() {
    world = evolve(world);
    return canvas_renderer(world);
  }), 250);

}).call(this);
